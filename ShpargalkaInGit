Тут будет моя шпаргалка в ГитХабе.

Работа с Git:

    Настройки имени и электронной почты:
        git config --global user.name "Ваше Имя"
        git config --global user.email "your_email@what.com"

    Загрузить репозиторий с удаленного сервера:
        git clone https://github.com/имя_аккаунта/имя_репозитория
    
    Добавить файл/файлы на отслеживание:
        git add имя_файла
        git add --all , git add . #добавить все файлы в каталоге

    Команда для записи индексированных изменений в репозиторий Git:
        git commit -m "комментарий"         # создать новый коммит
        git commit --amend "комментарий"    # включить новые изменения в последний созданный коммит

    Узнать состояние файлов в репозитории:
        git status

    Отправка локальный изменений на сервер:
        git push

    Получить обновления с удаленного репозитория:
        git pull

    Журнал коммитов:
        git log

    Показать изменения в определенном коммите:
        git show c952d95    # показать изменения в коммите с первыми цифрами c952d95
        git show HEAD       # показать изменения в последнем коммите

    Откат на определенный коммит:
        git reset номер_коммита 
        git reset HEAD program.py   # откатить на один коммит указанный файл
        git reset HEAD              # откатить все файлы до предыдущего коммита

Работа с виртуальным окружением:
    
    Развернуть в каталоге виртуальное окружение:
        py -m venv venv_name

    Запуск виртуального окружения:
        source venv_name/Scripts/activate   # запускаем через скрипт activate
    
    Остановить работу виртуального окружения:
        deactivate


Type Hints: аннотация типов данных:

    Чтобы держать типизацию под контролем применяют аннотации типов данных.
        birth_year = 1971       # без аннотации 
        birth_year: int = 1971  # с аннотацией: объявили переменную и указали, что переменная только для int
    Для функции будет выглядеть так
        def is_rhomb(a_size: float, b_size: float) -> bool:     # где -> bool есть тип возвращаемого значения
    Для класса:
        class Hello:
            x: str # Если здесь не указывать тип переменной,
                 # аннотация для x не отобразится в словаре __annotations__,
                 # однако анализатор возьмёт аннотацию из __init__ и корректно отработает
            def __init__(self, x: str = 'Привет') -> None:
                self.x = x

    Python считывает все аннотации(Type Hints) и сохраняет их в словарь __annotations__. 
        print(__annotations__)

Аннотация типов. Модуль typing:

    Для аннотирования типов данных применяют компоновщики. С помощью компоновщика можно указать для переменной
    несколько возможных типов данных.
        
        from typing import <имя_компоновщика>
        <имя переменной>: <имя_компоновщика>[<описание_типов_данных>]
    
    Компоновщик Optional аннотирует типы данных для переменных, которые могут принять два типа данных: данные
    определенного типа и тип None, тип None не указывется в компоновщике Optional в явном виде.

        from typing import Optional
        # переменная text ожидает данные типа str или None
        text: Optional[str]

    Компоновщик Union применяют если переменная должна принимать несколько разных типов. Разрешенные типы
    перечисляют через запятую, в квадратных скобках:

        from typing import Union
        # аргумент x может принимать целое число или строку
        def hundreds(x: Union[int, str]) -> str:
            return str(x * 100)

        hundreds(100)
        hundreds('сто')

    